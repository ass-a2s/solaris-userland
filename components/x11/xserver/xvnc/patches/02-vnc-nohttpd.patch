## Disable httpd service [PSARC/2017/236]

--- a/unix/vncserver	2018-11-20 16:07:55.091911787 -0800
+++ b/unix/vncserver	2018-11-20 16:08:09.629315441 -0800
@@ -206,7 +206,6 @@
 # We set some reasonable defaults. Config file settings
 # override these where present.
 $default_opts{desktop} = &quotedString($desktopName);
-$default_opts{httpd} = $vncJavaFiles if ($vncJavaFiles);
 $default_opts{auth} = &quotedString($xauthorityFile);
 $default_opts{geometry} = $geometry if ($geometry);
 $default_opts{depth} = $depth if ($depth);
--- a/unix/xserver/hw/vnc/Xvnc.man	2018-11-20 16:08:25.035427962 -0800
+++ b/unix/xserver/hw/vnc/Xvnc.man	2018-11-20 16:08:47.211681609 -0800
@@ -107,19 +107,6 @@
 mean an update will be aborted after this time.  Default is 20000 (20 seconds).
 .
 .TP
-.B \-httpd \fIdirectory\fP
-Run a mini-HTTP server which serves files from the given directory.  Normally
-the directory will contain the classes for the Java viewer.  In addition, files
-with a .vnc extension will have certain substitutions made so that a single
-installation of the Java VNC viewer can be served by separate instances of
-Xvnc.
-.
-.TP
-.B \-httpPort \fIport\fP
-Specifies the port on which the mini-HTTP server runs.  Default is 5800 plus
-the display number.
-.
-.TP
 .B \-rfbauth \fIpasswd-file\fP, \-PasswordFile \fIpasswd-file\fP
 Password file for VNC authentication.  There is no default, you should
 specify the password file explicitly.  Password file should be created with
--- a/unix/xserver/hw/vnc/vncExtInit.cc	2018-11-20 16:09:02.741775761 -0800
+++ b/unix/xserver/hw/vnc/vncExtInit.cc	2018-11-20 16:10:25.191060927 -0800
@@ -73,10 +73,12 @@
 typedef std::set<std::string, CaseInsensitiveCompare> ParamSet;
 static ParamSet allowOverrideSet;
 
+#ifdef ENABLE_HTTPD
 rfb::StringParameter httpDir("httpd",
                              "Directory containing files to serve via HTTP",
                              "");
 rfb::IntParameter httpPort("httpPort", "TCP port to listen for HTTP",0);
+#endif /* ENABLE_HTTPD */
 rfb::AliasParameter rfbwait("rfbwait", "Alias for ClientWaitTimeMillis",
                             &rfb::Server::clientWaitTimeMillis);
 rfb::IntParameter rfbport("rfbport", "TCP port to listen for RFB protocol",0);
@@ -215,6 +217,7 @@
                     localhostOnly ? "local" : (const char*)interface,
                     port);
 
+#ifdef ENABLE_HTTPD
           CharArray httpDirStr(httpDir.getData());
           if (httpDirStr.buf[0]) {
             port = httpPort;
@@ -229,6 +232,7 @@
                       localhostOnly ? "local" : (const char*)interface,
                       port);
           }
+#endif /* ENABLE_HTTPD */
         }
 
         CharArray desktopNameStr(desktopName.getData());
--- a/unix/xserver/hw/vnc/XserverDesktop.cc	2018-11-20 16:10:40.045644221 -0800
+++ b/unix/xserver/hw/vnc/XserverDesktop.cc	2018-11-20 16:11:10.822353684 -0800
@@ -72,6 +72,7 @@
   FileHTTPServer(XserverDesktop* d) : desktop(d) {}
   virtual ~FileHTTPServer() {}
 
+#ifdef ENABLE_HTTPD
   virtual rdr::InStream* getFile(const char* name, const char** contentType,
                                  int* contentLength, time_t* lastModified)
   {
@@ -101,6 +102,7 @@
     }
     return is;
   }
+#endif /* ENABLE_HTTPD */
 
   XserverDesktop* desktop;
 };
