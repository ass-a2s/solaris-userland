Solaris Audit support - not suitable for upstream

--- a/common/rfb/VNCSConnectionST.cxx	2017-03-11 02:36:55.540218849 +0000
+++ b/common/rfb/VNCSConnectionST.cxx	2017-03-11 02:39:43.674794316 +0000
@@ -36,6 +36,10 @@
 #define XK_XKB_KEYS
 #include <rfb/keysymdef.h>
 
+#ifdef HAVE_LIBBSM
+#include <ucred.h>
+#endif
+
 using namespace rfb;
 
 static LogWriter vlog("VNCSConnST");
@@ -63,6 +67,26 @@
   lastEventTime = time(0);
 
   server->clients.push_front(this);
+
+#ifdef HAVE_LIBBSM
+  if (adt_start_session(&audit_handle, NULL, 0) != 0) {
+      vlog.error("adt_start_session failed: %s", strerror(errno));
+  } else {
+    ucred_t             *uc = NULL;
+
+    if (getpeerucred(sock->getFd(), &uc) == 0) {
+      if (adt_set_from_ucred(audit_handle, uc, ADT_NEW) != 0) {
+       vlog.error("adt_set_from_ucred failed: %s", strerror(errno));
+      }
+      ucred_free(uc);
+    } else {
+      if (adt_set_user(audit_handle, ADT_NO_ATTRIB, ADT_NO_ATTRIB,
+                      ADT_NO_ATTRIB, ADT_NO_ATTRIB, NULL, ADT_NEW) != 0) {
+       vlog.error("adt_set_user failed: %s", strerror(errno));
+      }
+    }
+  }
+#endif
 }
 
 
@@ -92,6 +116,10 @@
   // Remove this client from the server
   server->clients.remove(this);
 
+#ifdef HAVE_LIBBSM
+  adt_end_session(audit_handle);
+#endif
+
   delete [] fenceData;
 }
 
@@ -119,6 +147,32 @@
 
   if (authenticated()) {
       server->lastDisconnectTime = time(0);
+
+#ifdef HAVE_LIBBSM
+      adt_event_data_t    *event;
+
+      if ((event = adt_alloc_event(audit_handle, ADT_vnc_disconnect)) == NULL) {
+       vlog.error("adt_alloc_event failed: %s", strerror(errno));
+      } else {
+       event->adt_vnc_disconnect.peer = sock->getFd();
+       if (adt_put_event(event, ADT_SUCCESS, ADT_SUCCESS) != 0) {
+         vlog.error("adt_put_event failed: %s", strerror(errno));
+       }
+       adt_free_event(event);
+      }
+  } else { // authentication failed
+    adt_event_data_t    *event;
+
+    if ((event = adt_alloc_event(audit_handle, ADT_vnc_connect)) == NULL) {
+      vlog.error("adt_alloc_event failed: %s", strerror(errno));
+    } else {
+      event->adt_vnc_connect.peer = sock->getFd();
+      if (adt_put_event(event, ADT_FAILURE, EACCES) != 0) {
+       vlog.error("adt_put_event failed: %s", strerror(errno));
+      }
+      adt_free_event(event);
+    }
+#endif
   }
 
   // Just shutdown the socket and mark our state as closing.  Eventually the
@@ -411,6 +465,20 @@
 
 void VNCSConnectionST::authSuccess()
 {
+#ifdef HAVE_LIBBSM
+  adt_event_data_t    *event;
+
+  if ((event = adt_alloc_event(audit_handle, ADT_vnc_connect)) == NULL) {
+    vlog.error("adt_alloc_event failed: %s", strerror(errno));
+  } else {
+    event->adt_vnc_connect.peer = sock->getFd();
+    if (adt_put_event(event, ADT_SUCCESS, ADT_SUCCESS) != 0) {
+      vlog.error("adt_put_event failed: %s", strerror(errno));
+    }
+    adt_free_event(event);
+  }
+#endif
+
   lastEventTime = time(0);
 
   server->startDesktop();
--- a/common/rfb/VNCSConnectionST.h	2018-11-20 19:27:16.655100749 -0800
+++ b/common/rfb/VNCSConnectionST.h	2018-11-20 19:28:30.691987864 -0800
@@ -34,6 +34,15 @@
 #include <rfb/SConnection.h>
 #include <rfb/Timer.h>
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#ifdef HAVE_LIBBSM
+#include <bsm/adt.h>
+#include <bsm/adt_event.h>
+#endif
+
 namespace rfb {
   class VNCServerST;
 
@@ -212,6 +221,10 @@
 
     CharArray closeReason;
     time_t startTime;
+
+#ifdef HAVE_LIBBSM
+    adt_session_data_t  *audit_handle;
+#endif
   };
 }
 #endif
--- a/common/rfb/CMakeLists.txt	2018-11-20 19:28:56.830363680 -0800
+++ b/common/rfb/CMakeLists.txt	2018-11-20 19:29:19.020663908 -0800
@@ -81,6 +81,10 @@
   set(RFB_LIBRARIES ${RFB_LIBRARIES} ${PAM_LIBS})
 endif()
 
+if(HAVE_LIBBSM)
+  set(RFB_LIBRARIES ${RFB_LIBRARIES} ${PAM_LIBS} -lbsm)
+endif()
+
 if(GNUTLS_FOUND)
   set(RFB_SOURCES
     ${RFB_SOURCES}
