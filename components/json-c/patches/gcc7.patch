From 014924ba899f659917bb64392bbff7d3c803afc2 Mon Sep 17 00:00:00 2001
From: marxin <mliska@suse.cz>
Date: Tue, 21 Mar 2017 08:42:11 +0100
Subject: [PATCH] Add FALLTHRU comment to handle GCC7 warnings.

---
 json_object.c  |  1 +
 json_tokener.c |  1 +
 linkhash.c     | 22 +++++++++++-----------
 3 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/json_object.c b/json_object.c
index 076cf45ff6..dfac9f1d55 100644
--- a/json_object.c
+++ b/json_object.c
@@ -552,6 +552,7 @@
     return jso->o.c_boolean;
   case json_type_string:
 	if (json_parse_int64(jso->o.c_string.str, &cint) == 0) return cint;
+	/* FALLTHRU */
   default:
     return 0;
   }
diff --git a/json_tokener.c b/json_tokener.c
index 6ddea11bf7..56b6c0772c 100644
--- a/json_tokener.c
+++ b/json_tokener.c
@@ -341,6 +341,7 @@ struct json_object* json_tokener_parse_ex(struct json_tokener *tok,
             tok->err = json_tokener_error_parse_unexpected;
             goto out;
         }
+	/* FALLTHRU */
       case '"':
 	state = json_tokener_state_string;
 	printbuf_reset(tok->pb);
diff --git a/linkhash.c b/linkhash.c
index af81825ccd..fd52fe34b2 100644
--- a/linkhash.c
+++ b/linkhash.c
@@ -415,17 +415,17 @@ static uint32_t hashlittle( const void *key, size_t length, uint32_t initval)
     /*-------------------------------- last block: affect all 32 bits of (c) */
     switch(length)                   /* all the case statements fall through */
     {
-    case 12: c+=((uint32_t)k[11])<<24;
-    case 11: c+=((uint32_t)k[10])<<16;
-    case 10: c+=((uint32_t)k[9])<<8;
-    case 9 : c+=k[8];
-    case 8 : b+=((uint32_t)k[7])<<24;
-    case 7 : b+=((uint32_t)k[6])<<16;
-    case 6 : b+=((uint32_t)k[5])<<8;
-    case 5 : b+=k[4];
-    case 4 : a+=((uint32_t)k[3])<<24;
-    case 3 : a+=((uint32_t)k[2])<<16;
-    case 2 : a+=((uint32_t)k[1])<<8;
+    case 12: c+=((uint32_t)k[11])<<24; /* FALLTHRU */
+    case 11: c+=((uint32_t)k[10])<<16; /* FALLTHRU */
+    case 10: c+=((uint32_t)k[9])<<8; /* FALLTHRU */
+    case 9 : c+=k[8]; /* FALLTHRU */
+    case 8 : b+=((uint32_t)k[7])<<24; /* FALLTHRU */
+    case 7 : b+=((uint32_t)k[6])<<16; /* FALLTHRU */
+    case 6 : b+=((uint32_t)k[5])<<8; /* FALLTHRU */
+    case 5 : b+=k[4]; /* FALLTHRU */
+    case 4 : a+=((uint32_t)k[3])<<24; /* FALLTHRU */
+    case 3 : a+=((uint32_t)k[2])<<16; /* FALLTHRU */
+    case 2 : a+=((uint32_t)k[1])<<8; /* FALLTHRU */
     case 1 : a+=k[0];
              break;
     case 0 : return c;
