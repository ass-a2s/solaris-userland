Fix docker build.

The security checks prevent docker to compile. Cgo flags are only allowed in
cgo-generated code and when building GO itself. This is implemented as simple
check that verifies prefix of source filename being compiled against (_cgo_).
At some point in docker build the GO compiler that the original filename used
to generate cgo code is nil. Thus docker build fails because GO compiler thinks
that the code that uses cgo flags is malicious, even if it was generated by GO
itself.

The patch is not for upstream as community doesn't support GO 1.7 anymore.

diff -ru golang-1.7.6.orig/src/cmd/compile/internal/gc/lex.go golang-1.7.6/src/cmd/compile/internal/gc/lex.go
-- golang-1.7.6.orig/src/cmd/compile/internal/gc/lex.go	2018-05-28 06:39:49.272796031 +0000
+++ golang-1.7.6/src/cmd/compile/internal/gc/lex.go	2018-05-24 05:59:21.083652182 +0000
@@ -1030,10 +1030,17 @@
 // See golang.org/issue/23672.
 func isCgoGeneratedFile() bool {
 	stk := Ctxt.LineHist.At(int(lineno))
+
 	if stk == nil {
 		return false
 	}
-	return strings.HasPrefix(filepath.Base(filepath.Clean(stk.File)), "_cgo_")
+
+	fname := stk.File
+	if fname == "" && stk.Parent != nil {
+		fname = stk.Parent.File
+	}
+
+	return strings.HasPrefix(filepath.Base(filepath.Clean(fname)), "_cgo_")
 }
 
 
