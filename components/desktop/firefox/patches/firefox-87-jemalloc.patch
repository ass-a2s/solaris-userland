We don't have malloc_usable_size. Therefore and probably for other reasons too we
need to use jemalloc. Not sure now with enabling (is it needed with the patch below?).
With this we don't have any warnings in about:memory.

ac_add_options --enable-jemalloc
ac_add_options --enable-replace-malloc
diff -r ff8505d177b9 build/moz.configure/memory.configure
--- a/build/moz.configure/memory.configure	Thu May 24 18:46:25 2018 +0300
+++ b/build/moz.configure/memory.configure	Fri May 25 07:18:52 2018 +0000
@@ -19,7 +19,7 @@
     if value.origin != 'default':
         return bool(value) or None
 
-    if target.kernel in ('Darwin', 'Linux', 'WINNT'):
+    if target.kernel in ('Darwin', 'Linux', 'SunOS', 'WINNT'):
         return True
 
 
diff -r c56ef1c14a55 memory/build/mozjemalloc.cpp
--- a/memory/build/mozjemalloc.cpp	Wed Mar 14 00:40:07 2018 +0200
+++ b/memory/build/mozjemalloc.cpp	Fri Mar 23 13:53:56 2018 +0000
@@ -1743,7 +1743,7 @@
 #define JEMALLOC_MADV_PURGE MADV_FREE
 #define JEMALLOC_MADV_ZEROS force_zero
 #endif
-  int err = madvise(addr, length, JEMALLOC_MADV_PURGE);
+  int err = posix_madvise(addr, length, JEMALLOC_MADV_PURGE);
   return JEMALLOC_MADV_ZEROS && err == 0;
 #undef JEMALLOC_MADV_PURGE
 #undef JEMALLOC_MADV_ZEROS
@@ -2451,7 +2451,7 @@
         mStats.committed -= npages;
 
 #ifndef MALLOC_DECOMMIT
-        madvise((void*)(uintptr_t(chunk) + (i << gPageSize2Pow)),
+        posix_madvise((void*)(uintptr_t(chunk) + (i << gPageSize2Pow)),
                 (npages << gPageSize2Pow), MADV_FREE);
 #ifdef MALLOC_DOUBLE_PURGE
         madvised = true;
