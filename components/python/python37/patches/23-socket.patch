Sendfile on Solaris can raise EINVAL if offset is bigger than size of the file.
Because this would not send any data anyway, we can safely avoid calling this
function at all.

With this patch, one test must be skipped. It expects exception when remote
host disconnects during the transmision.  But as the test is right now it sends
all the data and than check for disconnect, which is never raised, because
connection is not checked when no data are there to send.

This should not be a problem and can be ignored. 

This is not intended for upstream.

--- Python-3.7.1/Lib/socket.py	2018-12-11 02:17:19.937042390 +0000
+++ Python-3.7.1/Lib/socket.py	2018-12-11 02:16:19.605176973 +0000
@@ -301,6 +301,10 @@ class socket(_socket.socket):
                         blocksize = count - total_sent
                         if blocksize <= 0:
                             break
+                    # Sendfile on Solaris can raise EINVAL if offset >= size of the file.
+                    # In that case don't call it at all.
+                    elif offset >= fsize:
+                        break;
                     try:
                         sent = os_sendfile(sockno, fileno, offset, blocksize)
                     except BlockingIOError:
--- Python-3.7.1/Lib/test/test_asyncio/test_events.py	2018-12-11 02:18:49.288631538 +0000
+++ Python-3.7.1/Lib/test/test_asyncio/test_events.py	2018-12-11 02:10:29.421520568 +0000
@@ -2495,6 +2495,8 @@ class SendfileMixin(SendfileBase):
         self.assertEqual(srv_proto.data, self.DATA)
         self.assertEqual(self.file.tell(), len(self.DATA))
 
+    @unittest.skipIf(sys.platform.startswith('sunos'),
+                     "Doesn't work well on Solaris")
     def test_sendfile_close_peer_in_the_middle_of_receiving(self):
         srv_proto, cli_proto = self.prepare_sendfile(close_after=1024)
         with self.assertRaises(ConnectionError):
--- Python-3.7.1/Lib/asyncio/unix_events.py	2018-12-11 02:20:36.123330157 +0000
+++ Python-3.7.1/Lib/asyncio/unix_events.py	2018-12-11 02:20:28.457713859 +0000
@@ -356,6 +356,12 @@ class _UnixSelectorEventLoop(selector_ev
                 self._sock_sendfile_update_filepos(fileno, offset, total_sent)
                 fut.set_result(total_sent)
                 return
+        # Sendfile on Solaris can raise EINVAL if offset >= size of the file.
+        # In that case don't call it at all.
+        elif offset >= blocksize:
+            self._sock_sendfile_update_filepos(fileno, offset, total_sent)
+            fut.set_result(total_sent)
+            return
 
         try:
             sent = os.sendfile(fd, fileno, offset, blocksize)
