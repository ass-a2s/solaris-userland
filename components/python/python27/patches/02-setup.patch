This patch modifies the setup script to support Solaris.
As it is Solaris-specific, it is not suitable for upstream.

--- Python-2.7.15/setup.py.orig	2018-11-13 01:17:19.607311395 -0800
+++ Python-2.7.15/setup.py	2018-11-13 01:18:25.632668502 -0800
@@ -6,6 +6,7 @@
 import sys, os, imp, re, optparse
 from glob import glob
 from platform import machine as platform_machine
+from platform import processor as platform_processor
 import sysconfig
 
 from distutils import log
@@ -454,10 +455,13 @@
             os.unlink(tmpfile)
 
     def detect_modules(self):
-        # Ensure that /usr/local is always used
         if not cross_compiling:
-            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+            if host_platform != 'sunos5':
+                # Upstream notes the following for source builds:
+                #     Ensure that /usr/local is always used
+                # But we skip that for Solaris system builds.
+                add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+                add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
         if cross_compiling:
             self.add_gcc_paths()
         self.add_multiarch_paths()
@@ -785,6 +789,13 @@
                                                      ['/usr/lib/termcap'],
                                                      'termcap'):
                 readline_libs.append('termcap')
+
+	    if host_platform == 'sunos5':
+		# insert '-zrecord' before the readline libraries that we
+		# want to link with to avoid rl_insert() elimination
+		readline_extra_link_args = ('-Wl,-zrecord','-lreadline','-lncurses')
+		readline_libs = ()
+
             exts.append( Extension('readline', ['readline.c'],
                                    library_dirs=['/usr/lib/termcap'],
                                    extra_link_args=readline_extra_link_args,
@@ -806,7 +817,7 @@
         # socket(2)
         exts.append( Extension('_socket', ['socketmodule.c', 'timemodule.c'],
                                depends=['socketmodule.h'],
-                               libraries=math_libs) )
+                               libraries=math_libs + ['socket', 'nsl']) )
         # Detect SSL support for the socket module (via _ssl)
         search_for_ssl_incs_in = [
                               '/usr/local/ssl/include',
@@ -1082,7 +1093,8 @@
                                     db_dirs_to_check + lib_dirs, dblib )
                     if dblib_file:
                         dblib_dir = [ os.path.abspath(os.path.dirname(dblib_file)) ]
-                        raise db_found
+                        # Doesn't work; skip.
+                        # raise db_found
                     else:
                         if db_setup_debug: print "db lib: ", dblib, "not found"
 
@@ -1362,8 +1374,11 @@
                 # _curses_panel.so must link with panelw.
                 panel_library = 'panelw'
             curses_libs = [curses_library]
-            curses_incs = find_file('curses.h', inc_dirs,
-                                    [os.path.join(d, 'ncursesw') for d in inc_dirs])
+            if host_platform == 'sunos5':
+                curses_incs = ['/usr/include/ncurses']
+            else:
+                curses_incs = find_file('curses.h', inc_dirs,
+                                        [os.path.join(d, 'ncursesw') for d in inc_dirs])
             exts.append( Extension('_curses', ['_cursesmodule.c'],
                                    include_dirs = curses_incs,
                                    libraries = curses_libs) )
@@ -1385,9 +1400,21 @@
         # If the curses module is enabled, check for the panel module
         if (module_enabled(exts, '_curses') and
             self.compiler.find_library_file(lib_dirs, panel_library)):
+            panel_lib_dirs = []
+            if host_platform == 'sunos5' and "DFLAGS" in os.environ:
+                # Look for libpanel under /usr/gnu/lib on Solaris.
+                if os.environ["DFLAGS"] == '-32':
+                    panel_lib_dirs.append('/usr/gnu/lib')
+                else:
+                    if platform_processor() == 'sparc':
+                        panel_lib_dirs.append('/usr/gnu/lib/sparcv9')
+                    else:
+                        panel_lib_dirs.append('/usr/gnu/lib/amd64')
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
                                    include_dirs = curses_incs,
-                                   libraries = [panel_library] + curses_libs) )
+                                   libraries = [panel_library] + curses_libs,
+                                   library_dirs = panel_lib_dirs,
+                                   runtime_library_dirs = panel_lib_dirs) )
         else:
             missing.append('_curses_panel')
 
@@ -1552,6 +1579,35 @@
         else:
             missing.append('dl')
 
+        # ucred module (Solaris)
+        ucred_inc = find_file('ucred.h', [], inc_dirs)
+        tsol_inc = find_file('tsol/label.h', [], inc_dirs)
+        if ucred_inc is not None and tsol_inc is not None:
+            exts.append( Extension('ucred', ['ucred.c'],
+                                   libraries = ['tsol']) )
+
+        # dlpi module (Solaris)
+        dlpi_inc = find_file('libdlpi.h', [], inc_dirs)
+        if dlpi_inc is not None:
+            exts.append( Extension('dlpi', ['dlpimodule.c'],
+                                   libraries = ['dlpi']) )
+
+        # privileges module (Solaris)
+        priv_inc = find_file('priv.h', [], inc_dirs)
+        if priv_inc is not None:
+            exts.append( Extension('privileges', ['privileges.c']))
+
+        # rbac module (Solaris)
+        secdb_inc = find_file('secdb.h', [], inc_dirs)
+        aa_inc = find_file('auth_attr.h', [], inc_dirs)
+        ea_inc = find_file('exec_attr.h', [], inc_dirs)
+        ua_inc = find_file('user_attr.h', [], inc_dirs)
+        if secdb_inc is not None and aa_inc is not None and \
+            ea_inc is not None and ua_inc is not None:
+            exts.append( Extension('rbac', ['pyrbac.c', 'authattr.c', \
+                                   'execattr.c', 'userattr.c'],
+                                   libraries = ['nsl', 'socket', 'secdb']) )
+
         # Thomas Heller's _ctypes module
         self.detect_ctypes(inc_dirs, lib_dirs)
 
@@ -1602,9 +1658,14 @@
                 sysconfig.get_config_var('POSIX_SEMAPHORES_NOT_ENABLED')):
                 multiprocessing_srcs.append('_multiprocessing/semaphore.c')
 
+        multiproc_libs = []
+        if host_platform == 'sunos5':
+            multiproc_libs = [ "xnet" ]
+
         if sysconfig.get_config_var('WITH_THREAD'):
             exts.append ( Extension('_multiprocessing', multiprocessing_srcs,
                                     define_macros=macros.items(),
+                                    libraries=multiproc_libs,
                                     include_dirs=["Modules/_multiprocessing"]))
         else:
             missing.append('_multiprocessing')
@@ -1619,8 +1680,8 @@
         else:
             missing.append('linuxaudiodev')
 
-        if (host_platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6',
-                        'freebsd7', 'freebsd8')
+        if (host_platform in ('sunos5', 'linux2', 'freebsd4', 'freebsd5',
+                        'freebsd6', 'freebsd7', 'freebsd8')
             or host_platform.startswith("gnukfreebsd")):
             exts.append( Extension('ossaudiodev', ['ossaudiodev.c']) )
         else:
@@ -2098,7 +2159,8 @@
             # this option. If you want to compile ctypes with the Sun
             # compiler, please research a proper solution, instead of
             # finding some -z option for the Sun compiler.
-            extra_link_args.append('-mimpure-text')
+            #extra_link_args.append('-mimpure-text')
+            pass
 
         elif host_platform.startswith('hp-ux'):
             extra_link_args.append('-fPIC')
