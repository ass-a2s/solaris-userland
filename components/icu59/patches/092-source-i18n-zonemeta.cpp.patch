#
# Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
#
Add NULL checks for TimeZone::createTimeZoneIDEnumeration calls
http://bugs.icu-project.org/trac/ticket/12377
diff --git a/source/i18n/dtfmtsym.cpp b/source/i18n/dtfmtsym.cpp
--- a/icu/source/i18n/dtfmtsym.cpp
+++ b/icu/source/i18n/dtfmtsym.cpp
@@ -1288,6 +1288,10 @@ DateFormatSymbols::initZoneStringsArray(
     do { // dummy do-while
 
         tzids = TimeZone::createTimeZoneIDEnumeration(ZONE_SET, NULL, NULL, status);
+	if (tzids == NULL) {
+		status = U_MEMORY_ALLOCATION_ERROR;
+		break;
+	}
         rows = tzids->count(status);
         if (U_FAILURE(status)) {
             break;
diff --git a/source/i18n/zonemeta.cpp b/source/i18n/zonemeta.cpp
--- a/icu/source/i18n/zonemeta.cpp
+++ b/icu/source/i18n/zonemeta.cpp
@@ -464,12 +464,14 @@ ZoneMeta::getCanonicalCountry(const Unic
             u_UCharsToChars(region, regionBuf, 2);
 
             StringEnumeration *ids = TimeZone::createTimeZoneIDEnumeration(UCAL_ZONE_TYPE_CANONICAL_LOCATION, regionBuf, NULL, status);
-            int32_t idsLen = ids->count(status);
-            if (U_SUCCESS(status) && idsLen == 1) {
-                // only the single zone is available for the region
-                singleZone = TRUE;
-            }
-            delete ids;
+	    if (ids != NULL) {
+            	int32_t idsLen = ids->count(status);
+            	if (U_SUCCESS(status) && idsLen == 1) {
+                	// only the single zone is available for the region
+                	singleZone = TRUE;
+            	}
+            	delete ids;
+	    }
 
             // Cache the result
             umtx_lock(&gZoneMetaLock);
